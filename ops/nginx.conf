worker_processes auto;
events {}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log;

  resolver 127.0.0.11 valid=30s ipv6=off;

  map $uri $is_hashed {
    default 0;
    ~*\.[0-9a-f]{8,}\.(?:js|css|png|jpg|jpeg|gif|svg|webp|ico|woff2?)$ 1;
  }
  

  upstream api_upstream {
    zone upstream_api 64k;
    server api:3000 resolve;
  }

  # Redirect everything to HTTPS
  server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
  }

  # HTTPS site
  server {
    listen 443 ssl;
    http2 on;
    server_name lorangerose.be  www.lorangerose.be;

    ssl_certificate     /etc/letsencrypt/live/lorangerose.be/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/lorangerose.be/privkey.pem;
    ssl_session_timeout 1d;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Static SPA
    root /usr/share/nginx/html;
    index index.html;

    # Health
    location = /health {
      proxy_pass http://api_upstream/health;
      proxy_set_header Host              $host;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API
    location /api/ {
      client_max_body_size 50m;
      proxy_pass http://api_upstream;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_connect_timeout 5s;
      proxy_send_timeout 120s;
      proxy_read_timeout 120s;
      proxy_buffering off;
      add_header Cache-Control "no-store";
      proxy_next_upstream error timeout http_502 http_503 http_504;
      proxy_next_upstream_tries 3;
    }

    # Serve uploaded files
    location ^~ /uploads/ {
      alias /var/www/uploads/;
      try_files $uri =404;
      add_header Cache-Control "public, max-age=31536000, immutable";
    }

    # HTML (SPA shell) must revalidate so it finds new asset filenames
    location = /index.html {
      try_files $uri =404;
      add_header Cache-Control "no-cache, must-revalidate";
    }

    # (Optional) any other .html files
    location ~* \.html$ {
      add_header Cache-Control "no-cache, must-revalidate";
      try_files $uri =404;
    }

    # Static assets: hashed => long cache; non-hashed => short cache
    location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|webp|ico|woff2?)$ {
      if ($is_hashed) {
          add_header Cache-Control "public, max-age=31536000, immutable";
      }
      if ($is_hashed = 0) {
          add_header Cache-Control "public, max-age=300"; # 5 minutes for non-hashed leftovers
      }
      try_files $uri =404;
    }

    # Service worker / PWA metadata should revalidate
    location = /sw.js          { add_header Cache-Control "no-cache, must-revalidate"; try_files $uri =404; }
    location = /manifest.json  { add_header Cache-Control "no-cache, must-revalidate"; try_files $uri =404; }

    # SPA fallback
    location / {
      try_files $uri /index.html;
    }
  }
}
